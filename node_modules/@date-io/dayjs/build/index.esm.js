import defaultDayjs from 'dayjs';
import customParseFormatPlugin from 'dayjs/plugin/customParseFormat';
import localizedFormatPlugin from 'dayjs/plugin/localizedFormat';
import isBetweenPlugin from 'dayjs/plugin/isBetween';

defaultDayjs.extend(customParseFormatPlugin);
defaultDayjs.extend(localizedFormatPlugin);
defaultDayjs.extend(isBetweenPlugin);
var withLocale = function (dayjs, locale) {
    return !locale ? dayjs : function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return dayjs.apply(void 0, args).locale(locale);
    };
};
var defaultFormats = {
    normalDateWithWeekday: "ddd, MMM D",
    normalDate: "D MMMM",
    shortDate: "MMM D",
    monthAndDate: "MMMM D",
    dayOfMonth: "D",
    year: "YYYY",
    month: "MMMM",
    monthShort: "MMM",
    monthAndYear: "MMMM YYYY",
    weekday: "dddd",
    weekdayShort: "ddd",
    minutes: "mm",
    hours12h: "hh",
    hours24h: "HH",
    seconds: "ss",
    fullTime: "LT",
    fullTime12h: "hh:mm A",
    fullTime24h: "HH:mm",
    fullDate: "ll",
    fullDateWithWeekday: "dddd, LL",
    fullDateTime: "lll",
    fullDateTime12h: "ll hh:mm A",
    fullDateTime24h: "ll HH:mm",
    keyboardDate: "L",
    keyboardDateTime: "L LT",
    keyboardDateTime12h: "L hh:mm A",
    keyboardDateTime24h: "L HH:mm",
};
var DayjsUtils = /** @class */ (function () {
    function DayjsUtils(_a) {
        var _b = _a === void 0 ? {} : _a, locale = _b.locale, formats = _b.formats, instance = _b.instance;
        this.lib = "dayjs";
        this.rawDayJsInstance = instance || defaultDayjs;
        this.dayjs = withLocale(this.rawDayJsInstance, locale);
        this.locale = locale;
        this.formats = Object.assign({}, defaultFormats, formats);
    }
    DayjsUtils.prototype.is12HourCycleInCurrentLocale = function () {
        var _a, _b;
        /* istanbul ignore next */
        return /A|a/.test((_b = (_a = this.rawDayJsInstance.Ls[this.locale || "en"]) === null || _a === void 0 ? void 0 : _a.formats) === null || _b === void 0 ? void 0 : _b.LT);
    };
    DayjsUtils.prototype.getCurrentLocaleCode = function () {
        return this.locale || "en";
    };
    DayjsUtils.prototype.getFormatHelperText = function (format) {
        var _this = this;
        // @see https://github.com/iamkun/dayjs/blob/dev/src/plugin/localizedFormat/index.js
        var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?)|./g;
        return format
            .match(localFormattingTokens)
            .map(function (token) {
            var _a, _b;
            var firstCharacter = token[0];
            if (firstCharacter === "L") {
                /* istanbul ignore next */
                return (_b = (_a = _this.rawDayJsInstance.Ls[_this.locale || "en"]) === null || _a === void 0 ? void 0 : _a.formats[token]) !== null && _b !== void 0 ? _b : token;
            }
            return token;
        })
            .join("")
            .replace(/a/gi, "(a|p)m")
            .toLocaleLowerCase();
    };
    DayjsUtils.prototype.parse = function (value, format) {
        if (value === "") {
            return null;
        }
        return this.dayjs(value, format, this.locale);
    };
    DayjsUtils.prototype.date = function (value) {
        if (value === null) {
            return null;
        }
        return this.dayjs(value);
    };
    DayjsUtils.prototype.toJsDate = function (value) {
        return value.toDate();
    };
    DayjsUtils.prototype.isValid = function (value) {
        return this.dayjs(value).isValid();
    };
    DayjsUtils.prototype.isNull = function (date) {
        return date === null;
    };
    DayjsUtils.prototype.getDiff = function (date, comparing, units, float) {
        return date.diff(comparing, units, float);
    };
    DayjsUtils.prototype.isAfter = function (date, value) {
        return date.isAfter(value);
    };
    DayjsUtils.prototype.isBefore = function (date, value) {
        return date.isBefore(value);
    };
    DayjsUtils.prototype.isAfterDay = function (date, value) {
        return date.isAfter(value, "day");
    };
    DayjsUtils.prototype.isBeforeDay = function (date, value) {
        return date.isBefore(value, "day");
    };
    DayjsUtils.prototype.isBeforeYear = function (date, value) {
        return date.isBefore(value, "year");
    };
    DayjsUtils.prototype.isAfterYear = function (date, value) {
        return date.isAfter(value, "year");
    };
    DayjsUtils.prototype.startOfDay = function (date) {
        return date.clone().startOf("day");
    };
    DayjsUtils.prototype.endOfDay = function (date) {
        return date.clone().endOf("day");
    };
    DayjsUtils.prototype.format = function (date, formatKey) {
        return this.formatByString(date, this.formats[formatKey]);
    };
    DayjsUtils.prototype.formatByString = function (date, formatString) {
        return this.dayjs(date).format(formatString);
    };
    DayjsUtils.prototype.formatNumber = function (numberToFormat) {
        return numberToFormat;
    };
    DayjsUtils.prototype.getHours = function (date) {
        return date.hour();
    };
    DayjsUtils.prototype.addDays = function (date, count) {
        return count < 0 ? date.subtract(Math.abs(count), "day") : date.add(count, "day");
    };
    DayjsUtils.prototype.addMonths = function (date, count) {
        return count < 0 ? date.subtract(Math.abs(count), "month") : date.add(count, "month");
    };
    DayjsUtils.prototype.setMonth = function (date, count) {
        return date.set("month", count);
    };
    DayjsUtils.prototype.setHours = function (date, count) {
        return date.set("hour", count);
    };
    DayjsUtils.prototype.getMinutes = function (date) {
        return date.minute();
    };
    DayjsUtils.prototype.setMinutes = function (date, count) {
        return date.clone().set("minute", count);
    };
    DayjsUtils.prototype.getSeconds = function (date) {
        return date.second();
    };
    DayjsUtils.prototype.setSeconds = function (date, count) {
        return date.clone().set("second", count);
    };
    DayjsUtils.prototype.getMonth = function (date) {
        return date.month();
    };
    DayjsUtils.prototype.isSameDay = function (date, comparing) {
        return date.isSame(comparing, "day");
    };
    DayjsUtils.prototype.isSameMonth = function (date, comparing) {
        return date.isSame(comparing, "month");
    };
    DayjsUtils.prototype.isSameYear = function (date, comparing) {
        return date.isSame(comparing, "year");
    };
    DayjsUtils.prototype.isSameHour = function (date, comparing) {
        return date.isSame(comparing, "hour");
    };
    DayjsUtils.prototype.getMeridiemText = function (ampm) {
        return ampm === "am" ? "AM" : "PM";
    };
    DayjsUtils.prototype.startOfMonth = function (date) {
        return date.clone().startOf("month");
    };
    DayjsUtils.prototype.endOfMonth = function (date) {
        return date.clone().endOf("month");
    };
    DayjsUtils.prototype.startOfWeek = function (date) {
        return date.clone().startOf("week");
    };
    DayjsUtils.prototype.endOfWeek = function (date) {
        return date.clone().endOf("week");
    };
    DayjsUtils.prototype.getNextMonth = function (date) {
        return date.clone().add(1, "month");
    };
    DayjsUtils.prototype.getPreviousMonth = function (date) {
        return date.clone().subtract(1, "month");
    };
    DayjsUtils.prototype.getMonthArray = function (date) {
        var firstMonth = date.clone().startOf("year");
        var monthArray = [firstMonth];
        while (monthArray.length < 12) {
            var prevMonth = monthArray[monthArray.length - 1];
            monthArray.push(this.getNextMonth(prevMonth));
        }
        return monthArray;
    };
    DayjsUtils.prototype.getYear = function (date) {
        return date.year();
    };
    DayjsUtils.prototype.setYear = function (date, year) {
        return date.clone().set("year", year);
    };
    DayjsUtils.prototype.mergeDateAndTime = function (date, time) {
        return date.hour(time.hour()).minute(time.minute()).second(time.second());
    };
    DayjsUtils.prototype.getWeekdays = function () {
        var _this = this;
        var start = this.dayjs().startOf("week");
        return [0, 1, 2, 3, 4, 5, 6].map(function (diff) {
            return _this.formatByString(start.add(diff, "day"), "dd");
        });
    };
    DayjsUtils.prototype.isEqual = function (value, comparing) {
        if (value === null && comparing === null) {
            return true;
        }
        return this.dayjs(value).isSame(comparing);
    };
    DayjsUtils.prototype.getWeekArray = function (date) {
        var start = this.dayjs(date).clone().startOf("month").startOf("week");
        var end = this.dayjs(date).clone().endOf("month").endOf("week");
        var count = 0;
        var current = start;
        var nestedWeeks = [];
        while (current.isBefore(end)) {
            var weekNumber = Math.floor(count / 7);
            nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
            nestedWeeks[weekNumber].push(current);
            current = current.clone().add(1, "day");
            count += 1;
        }
        return nestedWeeks;
    };
    DayjsUtils.prototype.getYearRange = function (start, end) {
        var startDate = this.dayjs(start).startOf("year");
        var endDate = this.dayjs(end).endOf("year");
        var years = [];
        var current = startDate;
        while (current.isBefore(endDate)) {
            years.push(current);
            current = current.clone().add(1, "year");
        }
        return years;
    };
    DayjsUtils.prototype.isWithinRange = function (date, _a) {
        var start = _a[0], end = _a[1];
        return date.isBetween(start, end, null, "[]");
    };
    return DayjsUtils;
}());

export default DayjsUtils;
