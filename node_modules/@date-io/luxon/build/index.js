'use strict';

var luxon = require('luxon');

var defaultFormats = {
    dayOfMonth: "d",
    fullDate: "DD",
    fullDateWithWeekday: "DDDD",
    fullDateTime: "ff",
    fullDateTime12h: "DD, hh:mm a",
    fullDateTime24h: "DD, T",
    fullTime: "t",
    fullTime12h: "hh:mm a",
    fullTime24h: "HH:mm",
    hours12h: "hh",
    hours24h: "HH",
    keyboardDate: "D",
    keyboardDateTime: "D t",
    keyboardDateTime12h: "D hh:mm a",
    keyboardDateTime24h: "D T",
    minutes: "mm",
    seconds: "ss",
    month: "LLLL",
    monthAndDate: "MMMM d",
    monthAndYear: "LLLL yyyy",
    monthShort: "MMM",
    weekday: "cccc",
    weekdayShort: "ccc",
    normalDate: "d MMMM",
    normalDateWithWeekday: "EEE, MMM d",
    shortDate: "MMM d",
    year: "yyyy",
};
var LuxonUtils = /** @class */ (function () {
    function LuxonUtils(_a) {
        var _b = _a === void 0 ? {} : _a, locale = _b.locale, formats = _b.formats;
        this.lib = "luxon";
        this.locale = locale || "en-US";
        this.formats = Object.assign({}, defaultFormats, formats);
    }
    LuxonUtils.prototype.date = function (value) {
        if (typeof value === "undefined") {
            return luxon.DateTime.local();
        }
        if (value === null) {
            return null;
        }
        if (typeof value === "string") {
            return luxon.DateTime.fromJSDate(new Date(value));
        }
        if (value instanceof luxon.DateTime) {
            return value;
        }
        return luxon.DateTime.fromJSDate(value);
    };
    LuxonUtils.prototype.toJsDate = function (value) {
        return value.toJSDate();
    };
    LuxonUtils.prototype.parse = function (value, formatString) {
        if (value === "") {
            return null;
        }
        return luxon.DateTime.fromFormat(value, formatString, { locale: this.locale });
    };
    /* istanbul ignore next */
    LuxonUtils.prototype.is12HourCycleInCurrentLocale = function () {
        var _a, _b;
        if (typeof Intl === "undefined" || typeof Intl.DateTimeFormat === "undefined") {
            return true; // Luxon defaults to en-US if Intl not found
        }
        return Boolean((_b = (_a = new Intl.DateTimeFormat(this.locale, { hour: "numeric" })) === null || _a === void 0 ? void 0 : _a.resolvedOptions()) === null || _b === void 0 ? void 0 : _b.hour12);
    };
    LuxonUtils.prototype.getFormatHelperText = function (format) {
        // Unfortunately there is no way for luxon to retrieve readable formats from localized format
        return "";
    };
    /* istanbul ignore next */
    LuxonUtils.prototype.getCurrentLocaleCode = function () {
        return this.locale || luxon.Settings.defaultLocale;
    };
    LuxonUtils.prototype.addDays = function (date, count) {
        return count < 0 ? date.minus({ days: Math.abs(count) }) : date.plus({ days: count });
    };
    LuxonUtils.prototype.addMonths = function (date, count) {
        return count < 0
            ? date.minus({ months: Math.abs(count) })
            : date.plus({ months: count });
    };
    LuxonUtils.prototype.isValid = function (value) {
        if (value instanceof luxon.DateTime) {
            return value.isValid;
        }
        if (value === null) {
            return false;
        }
        return this.date(value).isValid;
    };
    LuxonUtils.prototype.isEqual = function (value, comparing) {
        if (value === null && comparing === null) {
            return true;
        }
        // make sure that null will not be passed to this.date
        if (value === null || comparing === null) {
            return false;
        }
        return this.date(value).equals(this.date(comparing));
    };
    LuxonUtils.prototype.isSameDay = function (date, comparing) {
        return date.hasSame(comparing, "day");
    };
    LuxonUtils.prototype.isSameMonth = function (date, comparing) {
        return date.hasSame(comparing, "month");
    };
    LuxonUtils.prototype.isSameYear = function (date, comparing) {
        return date.hasSame(comparing, "year");
    };
    LuxonUtils.prototype.isSameHour = function (date, comparing) {
        return date.hasSame(comparing, "hour");
    };
    LuxonUtils.prototype.isAfter = function (value, comparing) {
        return value > comparing;
    };
    LuxonUtils.prototype.isBefore = function (value, comparing) {
        return value < comparing;
    };
    LuxonUtils.prototype.isBeforeDay = function (value, comparing) {
        var diff = value.diff(comparing.startOf("day"), "days").toObject();
        return diff.days < 0;
    };
    LuxonUtils.prototype.isAfterDay = function (value, comparing) {
        var diff = value.diff(comparing.endOf("day"), "days").toObject();
        return diff.days > 0;
    };
    LuxonUtils.prototype.isBeforeYear = function (value, comparing) {
        var diff = value.diff(comparing.startOf("year"), "years").toObject();
        return diff.years < 0;
    };
    LuxonUtils.prototype.isAfterYear = function (value, comparing) {
        var diff = value.diff(comparing.endOf("year"), "years").toObject();
        return diff.years > 0;
    };
    LuxonUtils.prototype.getDiff = function (value, comparing) {
        if (typeof comparing === "string") {
            comparing = luxon.DateTime.fromJSDate(new Date(comparing));
        }
        return value.diff(comparing).as("millisecond");
    };
    LuxonUtils.prototype.startOfDay = function (value) {
        return value.startOf("day");
    };
    LuxonUtils.prototype.endOfDay = function (value) {
        return value.endOf("day");
    };
    LuxonUtils.prototype.format = function (date, formatKey) {
        return this.formatByString(date, this.formats[formatKey]);
    };
    LuxonUtils.prototype.formatByString = function (date, format) {
        return date.setLocale(this.locale).toFormat(format);
    };
    LuxonUtils.prototype.formatNumber = function (numberToFormat) {
        return numberToFormat;
    };
    LuxonUtils.prototype.getHours = function (value) {
        return value.get("hour");
    };
    LuxonUtils.prototype.setHours = function (value, count) {
        return value.set({ hour: count });
    };
    LuxonUtils.prototype.getMinutes = function (value) {
        return value.get("minute");
    };
    LuxonUtils.prototype.setMinutes = function (value, count) {
        return value.set({ minute: count });
    };
    LuxonUtils.prototype.getSeconds = function (value) {
        return value.get("second");
    };
    LuxonUtils.prototype.setSeconds = function (value, count) {
        return value.set({ second: count });
    };
    LuxonUtils.prototype.getMonth = function (value) {
        // See https://github.com/moment/luxon/blob/master/docs/moment.md#major-functional-differences
        return value.get("month") - 1;
    };
    LuxonUtils.prototype.setMonth = function (value, count) {
        return value.set({ month: count + 1 });
    };
    LuxonUtils.prototype.getYear = function (value) {
        return value.get("year");
    };
    LuxonUtils.prototype.setYear = function (value, year) {
        return value.set({ year: year });
    };
    LuxonUtils.prototype.mergeDateAndTime = function (date, time) {
        return date.set({
            second: time.second,
            hour: time.hour,
            minute: time.minute,
        });
    };
    LuxonUtils.prototype.startOfMonth = function (value) {
        return value.startOf("month");
    };
    LuxonUtils.prototype.endOfMonth = function (value) {
        return value.endOf("month");
    };
    LuxonUtils.prototype.startOfWeek = function (value) {
        return value.startOf("week");
    };
    LuxonUtils.prototype.endOfWeek = function (value) {
        return value.endOf("week");
    };
    LuxonUtils.prototype.getNextMonth = function (value) {
        return value.plus({ months: 1 });
    };
    LuxonUtils.prototype.getPreviousMonth = function (value) {
        return value.minus({ months: 1 });
    };
    LuxonUtils.prototype.getMonthArray = function (date) {
        var firstMonth = this.date(date).startOf("year");
        var monthArray = [firstMonth];
        while (monthArray.length < 12) {
            var prevMonth = monthArray[monthArray.length - 1];
            monthArray.push(this.getNextMonth(prevMonth));
        }
        return monthArray;
    };
    LuxonUtils.prototype.getWeekdays = function () {
        return luxon.Info.weekdaysFormat("narrow", { locale: this.locale });
    };
    LuxonUtils.prototype.getWeekArray = function (date) {
        var days = date
            .endOf("month")
            .endOf("week")
            .diff(date.startOf("month").startOf("week"), "days")
            .toObject().days;
        var weeks = [];
        new Array(Math.round(days))
            .fill(0)
            .map(function (_, i) { return i; })
            .map(function (day) { return date.startOf("month").startOf("week").plus({ days: day }); })
            .forEach(function (v, i) {
            if (i === 0 || (i % 7 === 0 && i > 6)) {
                weeks.push([v]);
                return;
            }
            weeks[weeks.length - 1].push(v);
        });
        return weeks;
    };
    LuxonUtils.prototype.getYearRange = function (start, end) {
        var startDate = this.date(start).startOf("year");
        var endDate = this.date(end).endOf("year");
        var current = startDate;
        var years = [];
        while (current < endDate) {
            years.push(current);
            current = current.plus({ year: 1 });
        }
        return years;
    };
    LuxonUtils.prototype.getMeridiemText = function (ampm) {
        return luxon.Info.meridiems({ locale: this.locale }).find(function (v) { return v.toLowerCase() === ampm.toLowerCase(); });
    };
    LuxonUtils.prototype.isNull = function (date) {
        return date === null;
    };
    LuxonUtils.prototype.isWithinRange = function (date, _a) {
        var start = _a[0], end = _a[1];
        return (date.equals(start) ||
            date.equals(end) ||
            (this.isAfter(date, start) && this.isBefore(date, end)));
    };
    return LuxonUtils;
}());

module.exports = LuxonUtils;
